<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Code-to-Image Compressor</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako.min.js"></script>
  <style>
    /* Previous styles remain the same */
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background: #f0f0f0;
    }
    .container {
      max-width: 800px;
      margin: auto;
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    textarea {
      width: 100%;
      height: 200px;
      margin: 10px 0;
      padding: 10px;
      font-family: 'Courier New', monospace;
      font-size: 14px;
      border: 1px solid #ddd;
      border-radius: 5px;
      resize: vertical;
    }
    button {
      margin: 10px 0;
      padding: 10px 20px;
      background-color: #007BFF;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background-color: #0056b3;
    }
    button:disabled {
      background-color: #cccccc;
      cursor: not-allowed;
    }
    button.danger {
      background-color: #dc3545;
    }
    button.danger:hover {
      background-color: #c82333;
    }
    img {
      max-width: 100%;
      margin: 20px 0;
      border: 1px solid #ddd;
      border-radius: 5px;
    }
    .drop-zone {
      border: 2px dashed #ccc;
      border-radius: 5px;
      padding: 20px;
      text-align: center;
      margin: 10px 0;
      cursor: pointer;
      transition: border-color 0.3s ease;
    }
    .drop-zone.dragover {
      border-color: #007BFF;
      background: #f8f9fa;
    }
    .file-input {
      display: none;
    }
    /* Spinner styles */
    .spinner-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }
    .spinner {
      width: 50px;
      height: 50px;
      border: 5px solid #f3f3f3;
      border-top: 5px solid #007BFF;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .processing-text {
      color: white;
      margin-top: 20px;
      font-size: 18px;
    }
    /* Progress bar styles */
    .progress-container {
      width: 100%;
      background: #f0f0f0;
      border-radius: 5px;
      margin: 10px 0;
      overflow: hidden;
    }
    .progress-bar {
      height: 20px;
      background: #007BFF;
      width: 0%;
      transition: width 0.3s ease;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Code-to-Image Compressor</h1>
    <!-- Spinner overlay -->
    <div class="spinner-overlay" id="spinnerOverlay">
      <div class="spinner"></div>
      <div class="processing-text" id="processingText">Processing...</div>
    </div>
    <!-- Progress bar -->
    <div class="progress-container">
      <div class="progress-bar" id="progressBar"></div>
    </div>
    <textarea id="inputText" placeholder="Enter text or data to encode..."></textarea>
    <div class="controls">
      <button id="encodeBtn">Encode to Image</button>
      <button id="saveBtn" disabled>Save Image</button>
      <button id="clearBtn" class="danger">Clear All</button>
    </div>
    <div class="drop-zone" id="dropZone">
      Drop image here or click to upload
    </div>
    <input type="file" id="uploadImage" class="file-input" accept="image/*">
    <button id="decodeBtn" disabled>Decode from Image</button>
    <textarea id="decodedText" placeholder="Decoded content will appear here..." readonly></textarea>
    <canvas id="outputCanvas" style="display:none;"></canvas>
    <img id="outputImage" alt="Encoded Image">
  </div>

  <script>
    let currentImage = null;

    // Show/hide spinner
    function showSpinner(show, message = 'Processing...') {
      const spinnerOverlay = document.getElementById('spinnerOverlay');
      const processingText = document.getElementById('processingText');
      spinnerOverlay.style.display = show ? 'flex' : 'none';
      processingText.textContent = message;
    }

    // Update progress bar
    function updateProgress(percentage) {
      const progressBar = document.getElementById('progressBar');
      progressBar.style.width = `${percentage}%`;
    }

    // Simulate a delay
    function simulateDelay(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }

    function calculateCanvasSize(dataLength) {
      const bytesPerPixel = 3;
      const pixelsNeeded = Math.ceil(dataLength / bytesPerPixel);
      const size = Math.ceil(Math.sqrt(pixelsNeeded));
      return Math.max(8, size);
    }

 async function encodeDataToImage(data, useCompression = true) {
  showSpinner(true, 'Encoding data...');
  updateProgress(0); // Reset progress bar
  try {
    // Simulate a delay of 1 second
    await simulateDelay(1000);

    // Use maximum compression level
    const compressedData = useCompression ? pako.deflate(data, { level: 9 }) : new TextEncoder().encode(data);
    
    // Create and encode metadata
    const metadata = new TextEncoder().encode(JSON.stringify({
      compressed: useCompression,
      size: compressedData.length
    }));
    
    // Combine metadata length (2 bytes) + metadata + separator (1 byte) + content
    const fullData = new Uint8Array(2 + metadata.length + 1 + compressedData.length);
    fullData[0] = metadata.length >> 8;
    fullData[1] = metadata.length & 0xFF;
    fullData.set(metadata, 2);
    fullData[2 + metadata.length] = 255; // Separator
    fullData.set(compressedData, 2 + metadata.length + 1);

    const canvas = document.getElementById('outputCanvas');
    const ctx = canvas.getContext('2d');

    const size = calculateCanvasSize(fullData.length);
    canvas.width = size;
    canvas.height = size;

    const imageData = ctx.createImageData(size, size);
    for (let i = 0; i < fullData.length; i += 3) {
      const pixelIndex = i * 4 / 3;
      imageData.data[pixelIndex] = fullData[i] || 0;
      imageData.data[pixelIndex + 1] = fullData[i + 1] || 0;
      imageData.data[pixelIndex + 2] = fullData[i + 2] || 0;
      imageData.data[pixelIndex + 3] = 255;

      // Update progress
      const progress = Math.floor((i / fullData.length) * 100);
      updateProgress(progress);
    }

    ctx.putImageData(imageData, 0, 0);
    return canvas;
  } catch (error) {
    throw error;
  } finally {
    showSpinner(false);
    updateProgress(100); // Complete progress bar
  }
}

    async function decodeImageData(imageData) {
      showSpinner(true, 'Decoding image...');
      try {
        const img = new Image();
        await new Promise((resolve, reject) => {
          img.onload = resolve;
          img.onerror = () => reject(new Error('Failed to load the image'));
          img.src = imageData;
        });

        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.drawImage(img, 0, 0);

        const pixelData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;

        // Extract the bytes array from pixel data
        const bytes = new Uint8Array(Math.floor(pixelData.length / 4) * 3);
        for (let i = 0; i < bytes.length; i++) {
          bytes[i] = pixelData[Math.floor(i / 3) * 4 + (i % 3)];
        }

        // Remove trailing zeros
        let lastNonZeroIndex = bytes.length - 1;
        while (lastNonZeroIndex > 0 && bytes[lastNonZeroIndex] === 0) {
          lastNonZeroIndex--;
        }
        const trimmedBytes = bytes.slice(0, lastNonZeroIndex + 1);

        // Sanitize and parse metadata
        const findMetadataEnd = () => {
          for (let i = 2; i < trimmedBytes.length; i++) {
            if (trimmedBytes[i] === 255) return i;
          }
          return -1;
        };

        const metadataEnd = findMetadataEnd();
        if (metadataEnd === -1) {
          throw new Error('Invalid metadata format: Separator not found');
        }

        // Extract metadata length (first 2 bytes)
        const metadataLength = (trimmedBytes[0] << 8) | trimmedBytes[1];
        if (metadataLength <= 0 || metadataLength > trimmedBytes.length) {
          throw new Error('Invalid metadata length');
        }

        // Extract metadata bytes
        const metadataBytes = trimmedBytes.slice(2, metadataEnd);
        if (metadataBytes.length !== metadataLength) {
          throw new Error('Metadata length mismatch');
        }

        // Decode metadata
        let metadata;
        try {
          const metadataString = new TextDecoder().decode(metadataBytes);
          metadata = JSON.parse(metadataString);
        } catch (parseError) {
          throw new Error('Failed to parse metadata: ' + parseError.message);
        }

        // Extract content bytes
        const contentBytes = trimmedBytes.slice(metadataEnd + 1);

        // Decompress if necessary
        if (metadata.compressed) {
          const decompressed = pako.inflate(contentBytes);
          return new TextDecoder().decode(decompressed);
        } else {
          return new TextDecoder().decode(contentBytes);
        }
      } catch (error) {
        throw new Error('Decoding failed: ' + error.message);
      } finally {
        showSpinner(false);
      }
    }

    // Event Listeners
    document.getElementById('encodeBtn').addEventListener('click', async () => {
      const inputText = document.getElementById('inputText').value;
      if (!inputText.trim()) {
        alert('Please enter some text to encode');
        return;
      }

      try {
        const canvas = await encodeDataToImage(inputText);
        currentImage = canvas;
        document.getElementById('outputImage').src = canvas.toDataURL('image/png'); // Use PNG for lossless encoding
        document.getElementById('saveBtn').disabled = false;
      } catch (error) {
        alert('Encoding failed: ' + error.message);
      }
    });

    document.getElementById('saveBtn').addEventListener('click', async () => {
      if (!currentImage) return;

      // Show spinner and saving message
      showSpinner(true, 'Saving image...');

      // Simulate progress
      let progress = 0;
      const interval = setInterval(() => {
        progress += 10;
        updateProgress(progress);
        if (progress >= 100) {
          clearInterval(interval);
        }
      }, 100);

      // Simulate a delay of 1 second
      await simulateDelay(1000);

      // Use toBlob with PNG for lossless encoding
      currentImage.toBlob(
        (blob) => {
          const link = document.createElement('a');
          link.download = `encoded-${Date.now()}.png`; // Save as PNG
          link.href = URL.createObjectURL(blob);
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(link.href); // Clean up object URL

          // Hide spinner and reset progress after saving is complete
          clearInterval(interval);
          updateProgress(100);
          showSpinner(false);
        },
        'image/png' // Use PNG format
      );
    });

    document.getElementById('clearBtn').addEventListener('click', () => {
      document.getElementById('inputText').value = '';
      document.getElementById('decodedText').value = '';
      document.getElementById('outputImage').src = '';
      document.getElementById('saveBtn').disabled = true;
      document.getElementById('decodeBtn').disabled = true;
      document.getElementById('uploadImage').value = '';
      currentImage = null;
      updateProgress(0); // Reset progress bar
    });

    document.getElementById('uploadImage').addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        document.getElementById('decodeBtn').disabled = false;
      }
    });

    document.getElementById('decodeBtn').addEventListener('click', async () => {
      const fileInput = document.getElementById('uploadImage');
      const file = fileInput.files[0];
      if (!file) {
        alert('Please upload an image to decode');
        return;
      }

      const reader = new FileReader();
      reader.onload = async (event) => {
        try {
          const decodedText = await decodeImageData(event.target.result);
          document.getElementById('decodedText').value = decodedText;
        } catch (error) {
          alert(error.message);
        }
      };

      reader.onerror = () => alert('Failed to read the image file');
      reader.readAsDataURL(file);
    });

    // Drag and drop handlers
    const dropZone = document.getElementById('dropZone');
    const uploadImage = document.getElementById('uploadImage');

    dropZone.addEventListener('click', () => {
      uploadImage.click(); // Trigger file input when drop zone is clicked
    });

    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('dragover');
    });

    dropZone.addEventListener('dragleave', () => {
      dropZone.classList.remove('dragover');
    });

    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('dragover');
      
      const file = e.dataTransfer.files[0];
      if (file && file.type.startsWith('image/')) {
        const dT = new DataTransfer();
        dT.items.add(file);
        uploadImage.files = dT.files;
        document.getElementById('decodeBtn').disabled = false;
      } else {
        alert('Please drop a valid image file');
      }
    });
  </script>
</body>
</html>
